#!/bin/sh

rmset() {
  if eval "test -z \"\$$1\"" ; then
    eval "export $1='$2'"
  fi
}

rmecho() {
  echo "$@"
}
rmwarn() {
  echo "$@"
}

rmdie() {
  echo "$@" >&2
  if test "$RM_GUI" = "y" ; then
    (IFS=' '; yad $RM_GUIARGS --text "$@" --button 'OK!gtk-ok';)
  fi
  exit 1
}

rmdieL() {
  if test "$RM_GUI" = "y" ; then
    (
      TITLE=''
      if test -n "$2" ; then
        TITLE="--title=$2"
      fi
      IFS=' '
      yad --text-info --filename="$LOG" --button='OK!gtk-ok' $RM_GUIARGS "$TITLE"
    )
  fi
  exit 1
}

rmcheck() {
  if test -d "$RME_XOCHITL" ; then
    rmdie "RM_XOCHITL($RM_XOCHITL) is not a dir"
  fi
}

rmdr() {
  if test -z "$RM_DRYRUN" ; then
    "$@"
  else
    echo "$@"
  fi
}

mkprogress() {
  # Create the progressbar
  test "$RM_GUI" = "y" || return 0
  d="$1"
  title="$2"
  opts="$3"
  test -d "$d" || return 1
  rm "$d/fifo" 2>/dev/null || true
  mkfifo "$d/fifo"
  (IFS=' '; yad $RM_GUIARGS --progress --title="$title" $opts < "$d/fifo" &
    echo "$!" > "$d/yad.pid"
  )
  exec 5>"$d/fifo"
  RM_PF="5"
}

killprogress() {
  # Cleanup progressbar resources
  RM_PF="1"
  test "$RM_GUI" = "y" || return 0
  d="$1"
  test -d "$d" || return 1
  rm "$d/fifo" 2>/dev/null || true
  exec 5>&- || true
  kill $(cat "$d/yad.pid") 2>/dev/null
}

echoprogress() {(
  # Update the progressbar
  set +x
  shift # First argument (T) is ignored
  ADDNUMBERS=n
  SILENTNUMBERS=n
  while test -n "$1" ; do
    case "$1" in
      --add-numbers) ADDNUMBERS=y ;;
      -S|--silent-numbers) SILENTNUMBERS=y ;;
      [0-9]*)
        test "$RM_PF" != "1" && echo "$1" >&$RM_PF
        test "$SILENTNUMBERS" = "n" && echo "$1"
        ;;
      \#*)
        test "$RM_PF" != "1" && echo "$1" >&$RM_PF
        echo "$1"
        ;;
      -) rmwarn "WARNING: stdin mode is not supported in echoprogress" ;;
      *)
        test "$RM_PF" != "1" && echo "#$1" >&$RM_PF
        echo "$1"
        ;;
    esac
    shift
  done
)}

catprogress() {(
  # Update the progressbar from stdin
  while read line ; do
    case "$line" in
      [0-9]*) test "$RM_PF" != "1" && echo "$line" >&$RM_PF; echo "$line" ;;
      \#*) test "$RM_PF" != "1" && echo "$line" >&$RM_PF;  echo "$line" ;;
      *) test "$RM_PF" != "1" && echo "#$line" >&$RM_PF; echo "$line" ;;
    esac
  done
)}

rmvpsrport() {
  case "$RM_DEVICE" in
    A) echo "$RM_VPSRPORT_A" ;;
    B) echo "$RM_VPSRPORT_B" ;;
    *) rmdie "RM_DEVICE is invalid ($RM_DEVICE) or not specified" ;;
  esac
}

RM_NOUSER="<INVALID_USER>"
RM_NOIP="<INVALID_IP>"
RM_NOPORT="<INVALID_PORT>"

RM_PF=1
if test -f "./_rmconfig" ; then
  . ./_rmconfig
fi
if test -f "$(dirname "$0")/rmconfig" ; then
  . $(dirname "$0")/rmconfig
fi
if test -f "/etc/rmconfig" ; then
  . "/etc/rmconfig"
fi

# Show the X11 progress bars with Yad or not
rmset RM_GUI "y"
# Enable shell tracing, typically with `set -x`
rmset RM_VERBOSE "n"
# Pass --dry-run whenever possible
rmset RM_DRYRUN ""
# Marker to annotate files received from the device
rmset RM_AMARKER "annot"

# Arguments to be passed to Yad at every call
rmset RM_GUIARGS ""
# Directory where to store Host's image of Remarkable document folder
rmset RM_XOCHITL $HOME/.xochitl
# `.ssh/config` name of a direct Remarkable connection, typically configured as
# `root@10.11.99.1`
rmset RM_SSH "remarkable"
# `.ssh/config` name of VPS connection with public IP
rmset RM_VPSSSH ""
# Reverse VPS Port(s) that Remarkable(s) are to open to allow wireless SSH connections
rmset RM_VPSRPORT_A "$RM_NOPORT"
rmset RM_VPSRPORT_B "$RM_NOPORT"

rmset RM_VPSIP "$RM_NOIP" # Optional, could be deduced from SSH config
rmset RM_VPSUSER "$RM_NOUSER" # Optional, could be deduced from SSH config
rmset RM_VPSPORT "$RM_NOPORT" # Optional, could be deduced from SSH config
rmset RM_THUMBNAILS "n"
rmset RM_DEVICE "A" # Use device 'A' by default

